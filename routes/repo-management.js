var path=require("path"),db=require("../models"),axios=require("axios");const{v4:uuidv4}=require("uuid"),consts=require("../utils/consts"),repo=require("../models/repo");module.exports=function(a){a.get("/addRepo",(a,b)=>{a.cookies.uuid?db.User.findOne({where:{cookie:a.cookies.uuid}}).then(a=>{if(!a)return void b.redirect("/");var c={headers:{Authorization:`token ${a.accessToken}`}};axios.get(consts.GITHUB_REPO_URL,c).then(a=>{if(0<a.data.length){for(var c=[],d=0;d<a.data.length;d++)if(!a.data[d].private){var e={name:a.data[d].name,description:a.data[d].description,language:a.data[d].language,url:a.data[d].html_url,id:a.data[d].id};c.push(e)}b.render("addRepo",{repos:c})}else console.log("Nothin")}).catch(a=>{console.log(a)})}):(console.log("No Cookie, Redirecting"),b.redirect("/"))}),a.post("/api/postRepo",(a,b)=>{var c=a.body.Repos;return a.cookies.uuid?void db.User.findOne({where:{cookie:a.cookies.uuid}}).then(a=>{for(var d={headers:{Authorization:`token ${a.accessToken}`}},e=c.length,f=0,g=0;g<c.length;g++){console.log(c[g]);var h=c=>{db.Repo.findOne({where:{githubId:c}}).then(g=>{if(g)return console.log("Cannot add "+g.githubId+" already exists"),f++,void(f==e&&(b.status(204),b.send("")));console.log("adding repo"+c);axios.get(consts.GITHUB_REPO_BY_ID+c,d).then(g=>{axios.get(g.data.languages_url,d).then(d=>{var h=0,i=0,j=d.data;for(const a in j)h++,i+=j[a];for(const a in j)j[a]=100*(j[a]/i);var l={};for(const a in j){var m=a.replace(/\./g,"_");l[m]=j[a]}console.log("finished getting repos"),g.data.description||(console.log("Repo has no description adding none"),g.data.description="None!");var n={githubId:c,title:g.data.name,description:g.data.description,UserId:a.id};for(const a in l)n[a]=l[a];db.Repo.create(n).then(()=>{console.log("Repo Successfully added"),f++,f==e&&(b.status(204),b.send(""))})})})})};h(c[g])}}):(b.status(500),void b.send("Not logged in"))}),a.post("/api/saveRepo",(a,b)=>{var c=a.body.repoId;console.log(a.body),a.cookies.uuid&&db.User.findOne({where:{cookie:a.cookies.uuid}}).then(a=>{db.SavedRepos.findOrCreate({where:{UserId:a.dataValues.id,RepoId:c}}).then(a=>{a[1]?(b.status(200),b.send("Saved Repo")):(b.status(200),b.send("Repo already exists"))})})}),a.get("/savedRepos",(a,b)=>{db.User.findOne({where:{cookie:a.cookies.uuid}}).then(a=>{if(!a)return void b.redirect("/");var c={headers:{Authorization:`token ${a.accessToken}`}};db.SavedRepos.findAll({where:{UserId:a.id}}).then(a=>{var d=a.length,e=0,f=[],g=a=>{var g=consts.GITHUB_REPO_BY_ID+a;console.log(g),axios.get(g,c).then(a=>{var c={author:a.data.owner.login,name:a.data.name,url:a.data.html_url};f.push(c),e++,d==e&&b.render("saved",{repos:f})})};console.log(a);for(var h=0;h<a.length;h++)db.Repo.findOne({where:{id:a[h].dataValues.RepoId}}).then(a=>{g(a.dataValues.githubId)})})})})};